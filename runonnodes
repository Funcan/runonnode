#!/usr/bin/env python

from noderange import expand
import sys
import paramiko
from paramiko import SSHException
import getpass
import argparse

def runonnodes(nodespec, cmd, dshbak=False, verbose=False, user=None):
    nodes = expand(nodespec)

    if len(nodes) == 0:
        print "Need at least one node to run on"
        sys.exit(1)

    for node in nodes:
        nc = NodeConnection(node, user)
        nc.connect(verbose=verbose)
        nc.exec_command(cmd)
        if not dshbak:
            print "--------------- %s ---------------" % (node)
            nc.print_output()
        else:
            nc.print_output(str(node) + ": ")


class NodeConnection(object):
    def __init__(self, name, user=None):
        self.name = name
        self.ssh = None
        self.stdin = None
        self.stdout = None
        self.stderr = None
        if user:
            self.user = user
        else:
            self.user = getpass.getuser()

    def connect(self, verbose=False, port=22):
        if verbose:
        	print "Connection to host '%s'" % (self.name)
        self.ssh = paramiko.SSHClient()
        self.ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        try:
            self.ssh.connect(self.name, 22, self.user)
        except SSHException as e:
            #Try again with a password
            self.ssh.connect(self.name, 22, self.user, password=getpass.getpass("Key based logon did not work, please provide password for %s@%s: " % (self.user, self.name), stream=sys.stderr,))

    def exec_command(self, cmd):
        if not self.ssh:
        	raise Exception("exec_command: not connected")
        self.stdin, self.stdout, self.stderr = self.ssh.exec_command(cmd)

    def print_output(self, leader=''):
        #FIXME: dshbak (leader) mode nott yet implemented correctly due to
        #       readline() returning a character at a time rather than a line.
        if not self.stdin or not self.stdout or not self.stderr:
        	raise Exception("print_output: not connected")
        for line in self.stdout.readline():
             sys.stdout.write(line)
        sys.stdout.flush()
        for line in self.stderr.readline():
        	sys.stderr.write(line)
        sys.stderr.flush()

def main():
    parser = argparse.ArgumentParser(description="Run a command on a set of nodes")
    parser.add_argument('-t', action="store_true", default=False)
    parser.add_argument('-v', action="store_true", default=False)
    parser.add_argument('-w', action="store", dest="where")
    parser.add_argument('-u', action="store", dest="user")
    parser.add_argument('command', nargs='*', action="store")
    args = parser.parse_args(sys.argv[1:])

    runonnodes(args.where, " ".join(args.command), dshbak=args.t, verbose=args.v, user=args.user)

if __name__ == "__main__":
    main()
